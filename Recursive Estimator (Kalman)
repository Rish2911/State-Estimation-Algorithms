from math import cos, sin, sqrt, atan2
import pickle
import numpy as np
from numpy.linalg import inv
import matplotlib.pyplot as plt

with open('data/data.pickle', 'rb') as f:
    data = pickle.load(f)

t = data['t']  # timestamps [s]

x_init  = data['x_init'] # initial x position [m]
y_init  = data['y_init'] # initial y position [m]
th_init = data['th_init'] # initial theta position [rad]

# input signal
v  = data['v']  # translational velocity input [m/s]
om = data['om']  # rotational velocity input [rad/s]

# bearing and range measurements, LIDAR constants
b = data['b']  # bearing to each landmarks center in the frame attached to the laser [rad]
r = data['r']  # range measurements [m]
l = data['l']  # x,y positions of landmarks [m]
d = data['d']  # distance between robot center and laser rangefinder [m]

v_var = 1  # translation velocity variance  
om_var = 5  # rotational velocity variance 
r_var = 0.01  # range measurements variance
b_var = 10  # bearing measurement variance

Q_km = np.diag([v_var, om_var]) # input noise covariance 
cov_y = np.diag([r_var, b_var])  # measurement noise covariance 

x_est = np.zeros([len(v), 3])  # estimated states, x, y, and theta
P_est = np.zeros([len(v), 3, 3])  # state covariance matrices

x_est[0] = np.array([x_init, y_init, th_init]) # initial state
P_est[0] = np.diag([1, 1, 0.1]) # initial state covariance

I = np.eye(3)

# Wraps angle to (-pi,pi] range
def wraptopi(x):
    return (x + np.pi) % (2 * np.pi) - np.pi


def measurement_update(lk, rk, bk, P_check, x_check):
    x_check[2] = wraptopi(x_check[2])
    x = x_check
    P = P_check
    x_k = x[0]
    y_k = x[1]
    theta_k = x[2]
    x_l = lk[0]
    y_l = lk[1]
    
    dx = x_l - x_k - d * cos(theta_k)
    dy = y_l - y_k - d * sin(theta_k)
    r = sqrt(dx**2 + dy**2)
    phi = atan2(dy, dx) - theta_k
    y = np.vstack([r, wraptopi(phi)])
    y_meas = np.vstack([rk, wraptopi(bk)])
    
    # 1. Compute measurement Jacobian
    M = np.eye(2)
    H = np.ones((2, 3))
    H[0, 0] = -dx / r
    H[0, 1] = -dy / r
    H[0, 2] = d * (dx * sin(theta_k) - dy * cos(theta_k)) / r
    H[1, 0] = dy / r**2
    H[1, 1] = -dx / r**2
    H[1, 2] = -d * (dy * sin(theta_k) + dx * cos(theta_k)) / r**2

    # 2. Compute Kalman Gain
    K = P @ H.T @ inv(H @ P @ H.T + M @ cov_y @ M.T)

    # 3. Correct predicted state (remember to wrap the angles to [-pi,pi])
    x_check = x + K @ (y_meas - y)
    x_check[2] = wraptopi(x_check[2])

    # 4. Correct covariance
    P_check = (I - K @ H) @ P

    return x_check, P_check

#### 5. Main Filter Loop #######################################################################
x_check = x_est[0, :].reshape(3,1)
P_check = P_est[0]
for k in range(1, len(t)):  # start at 1 because we've set the initial prediciton

    delta_t = t[k] - t[k - 1]  # time step (difference between timestamps)
    x_check[2] = wraptopi(x_check[2])
    theta = x_check[2]

    # 1. Update state with odometry readings (remember to wrap the angles to [-pi,pi])
    x_check[0] += v[k-1] * cos(theta) * delta_t
    x_check[1] += v[k-1] * sin(theta) * delta_t
    x_check[2] += om[k-1] * delta_t
    x_check[2] = wraptopi(x_check[2])

    # 2. Motion model jacobian with respect to last state
    F_km = np.array([[1, 0, -v[k-1] * sin(theta) * delta_t],
                     [0, 1, v[k-1] * cos(theta) * delta_t],
                     [0, 0, 1]])

    # 3. Motion model jacobian with respect to noise
    L_km = np.array([[cos(theta) * delta_t, 0],
                     [sin(theta) * delta_t, 0],
                     [0, delta_t]])

    # 4. Propagate uncertainty
    P_check = F_km @ P_check @ F_km.T + L_km @ Q_km @ L_km.T
    

    # 5. Update state estimate using available landmark measurements
    for i in range(len(r[k])):
        x_check, P_check = measurement_update(l[i], r[k, i], b[k, i], P_check, x_check)

    # Set final state predictions for timestep
    x_est[k, 0] = x_check[0]
    x_est[k, 1] = x_check[1]
    x_est[k, 2] = x_check[2]
    P_est[k, :, :] = P_check
    
    e_fig = plt.figure()
ax = e_fig.add_subplot(111)
ax.plot(x_est[:, 0], x_est[:, 1])
ax.set_xlabel('x [m]')
ax.set_ylabel('y [m]')
ax.set_title('Estimated trajectory')
plt.show()

e_fig = plt.figure()
ax = e_fig.add_subplot(111)
ax.plot(t[:], x_est[:, 2])
ax.set_xlabel('Time [s]')
ax.set_ylabel('theta [rad]')
ax.set_title('Estimated trajectory')
plt.show()
